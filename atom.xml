<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://heshiying.github.io</id>
    <title>烂笔头</title>
    <updated>2021-02-05T14:57:38.416Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://heshiying.github.io"/>
    <link rel="self" href="https://heshiying.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://heshiying.github.io/images/avatar.png</logo>
    <icon>https://heshiying.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 烂笔头</rights>
    <entry>
        <title type="html"><![CDATA[JetBrains 开发IDE 2020.4 以下版本最新全家桶系列产品激活破解方法]]></title>
        <id>https://heshiying.github.io/post/jetbrains-kai-fa-ide-20204-yi-xia-ban-ben-zui-xin-quan-jia-tong-xi-lie-chan-pin-ji-huo-po-jie-fang-fa/</id>
        <link href="https://heshiying.github.io/post/jetbrains-kai-fa-ide-20204-yi-xia-ban-ben-zui-xin-quan-jia-tong-xi-lie-chan-pin-ji-huo-po-jie-fang-fa/">
        </link>
        <updated>2021-02-05T13:24:51.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://www.macfz.com/a/Jetbrainscrack.html">转载于</a><br>
2020-11-26日更新通知，jetbrains-agent这个项目停止了！但现在zhile.io大佬提供了一个新的思路方法大家可以试下！感谢zhile.io大佬这么多年的辛苦工作，希望大家也能理解！</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.macfz.com/a/Jetbrainscrack.html">转载于</a><br>
2020-11-26日更新通知，jetbrains-agent这个项目停止了！但现在zhile.io大佬提供了一个新的思路方法大家可以试下！感谢zhile.io大佬这么多年的辛苦工作，希望大家也能理解！</p>
<!-- more -->
<h1 id="0x0-项目背景">0x0. 项目背景</h1>
<p>Jetbrains家的产品有一个很良心的地方，他会允许你试用30天（这个数字写死在代码里了）以评估是否你真的需要为它而付费。<br>
但很多时候会出现一种情况：IDE并不能按照我们实际的试用时间来计算。<br>
我举个例子：如果我们开始了试用，然后媳妇生孩子要你回去陪产！陪产时我们并无空闲对IDE试用评估，它依旧算试用时间。（只是举个例子，或许你并没有女朋友）<br>
发现了吗？你未能真的有30天来对它进行全面的试用评估，你甚至无法作出是否付费的决定。此时你会想要延长试用时间，然而Jetbrains并未提供相关功能，该怎么办？</p>
<p>事实上有一款插件可以实现这个功能，你或许可以用它来重置一下试用时间。但切记不要无休止的一直试用，这并不是这个插件的本意！</p>
<h1 id="0x1-如何安装">0x1. 如何安装</h1>
<ul>
<li>1). 插件市场安装：<br>
在Settings/Preferences... -&gt; Plugins 内手动添加第三方插件仓库地址：https://plugins.zhile.io<br>
搜索：IDE Eval Reset插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？<br>
插件会提示安装成功。</li>
<li>2). 下载安装：<br>
<a href="https://www.macfz.com/a/IDEeval.html">点击这个链接</a>(v2.1.6)下载插件的zip包（macOS可能会自动解压，然后把zip包丢进回收站）<br>
通常可以直接把zip包拖进IDE的窗口来进行插件的安装。如果无法拖动安装，你可以在Settings/Preferences... -&gt; Plugins 里手动安装插件（Install Plugin From Disk...）<br>
插件会提示安装成功。</li>
</ul>
<h1 id="0x2-如何使用">0x2. 如何使用</h1>
<ul>
<li>一般来说，在IDE窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（25天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示）</li>
<li>也可以手动唤出插件的主界面：
<ul>
<li>如果IDE没有打开项目，在Welcome界面点击菜单：Get Help -&gt; Eval Reset</li>
<li>如果IDE打开了项目，点击菜单：Help -&gt; Eval Reset</li>
</ul>
</li>
<li>唤出的插件主界面中包含了一些显示信息，2个按钮，1个勾选项：
<ul>
<li>按钮：Reload 用来刷新界面上的显示信息。</li>
<li>按钮：Reset 点击会询问是否重置试用信息并重启IDE。选择Yes则执行重置操作并重启IDE生效，选择No则什么也不做。（此为手动重置方式）</li>
<li>勾选项：Auto reset before per restart 如果勾选了，则自勾选后每次重启/退出IDE时会自动重置试用信息，你无需做额外的事情。（此为自动重置方式）</li>
</ul>
</li>
</ul>
<h1 id="0x3-如何更新">0x3. 如何更新</h1>
<ul>
<li>1). 插件更新机制（推荐）：
<ul>
<li>IDE会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</li>
<li>点击IDE的Check for Updates... 菜单手动检测IDE和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</li>
<li>插件更新可能会需要重启IDE。</li>
</ul>
</li>
<li>2). 手动更新：
<ul>
<li>从本页面下载最新的插件zip包安装更新。参考本文：下载安装小节。</li>
<li>插件更新需要重启IDE。</li>
</ul>
</li>
</ul>
<h1 id="0x4-一些说明">0x4. 一些说明</h1>
<ul>
<li>本插件默认不会显示其主界面，如果你需要，参考本文：如何使用小节。</li>
<li>市场付费插件的试用信息也会一并重置。</li>
<li>对于某些付费插件（如: Iedis 2, MinBatis）来说，你可能需要去取掉javaagent配置（如果有）后重启IDE：
<ul>
<li>如果IDE没有打开项目，在Welcome界面点击菜单：Configure -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。</li>
<li>如果IDE打开了项目，点击菜单：Help -&gt; Edit Custom VM Options... -&gt; 移除 -javaagent: 开头的行。</li>
<li>重置需要重启IDE生效！</li>
<li>重置后并不弹出Licenses对话框让你选择输入License或试用，这和之前的重置脚本/插件不同（省去这烦人的一步）。</li>
<li>如果长达25天不曾有任何重置动作，IDE会有通知询问你是否进行重置。</li>
<li>如果勾选：Auto reset before per restart ，重置是静默无感知的。</li>
<li>简单来说：勾选了Auto reset before per restart则无需再管，一劳永逸。</li>
</ul>
</li>
</ul>
<h1 id="0x5-开源信息">0x5. 开源信息</h1>
<ul>
<li>插件是学习研究项目，源代码是开放的。源码仓库地址：<a href="https://gitee.com/pengzhile/ide-eval-resetter">Gitee</a>。</li>
<li>如果你有更好的想法，欢迎给我提Pull Request来共同研究完善。</li>
<li>插件源码使用：GPL-2.0开源协议发布。</li>
<li>插件使用PHP编写，毕竟PHP是世界上最好的编程语言！</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[01.环境安装]]></title>
        <id>https://heshiying.github.io/post/huan-jing-an-zhuang/</id>
        <link href="https://heshiying.github.io/post/huan-jing-an-zhuang/">
        </link>
        <updated>2020-12-10T15:40:03.000Z</updated>
        <summary type="html"><![CDATA[<p>基础阶段的环境搭建。虚拟环境的搭建以及基础阶段常用的包的安装。</p>
]]></summary>
        <content type="html"><![CDATA[<p>基础阶段的环境搭建。虚拟环境的搭建以及基础阶段常用的包的安装。</p>
<!-- more -->
<h1 id="1虚拟环境virtualenv安装">1.🏡虚拟环境virtualenv安装</h1>
<p>python 的虚拟环境可以为一个 python 项目提供独立的解释环境、依赖包等资源，既能够很好的隔离不同项目使用不同 python 版本带来的冲突，而且还能方便项目的发布。</p>
<p>virtualenv可用于创建独立的 Python 环境，它会创建一个包含项目所必须要的执行文件。</p>
<h2 id="11-安装virtualenv">1.1 安装virtualenv</h2>
<pre><code class="language-python">sudo pip3 install virtualenv
# 配置 pip 安装第三方库的镜像源地址
sudo pip install -i https://pypi.douban.com/simple virtualenv
# 查看版本
virtualenv --version
</code></pre>
<h2 id="12-virtualenv使用方法">1.2 virtualenv使用方法</h2>
<p>如下命令表示在当前目录下创建一个名叫 env 的目录（虚拟环境），该目录下包含了独立的 Python 运行程序,以及 pip副本用于安装其他的 packge</p>
<pre><code class="language-python"># 当前目录创建虚拟环境
virtualenv [虚拟环境名称]
# 创建 env 的时候可以选择 Python 解释器，例如：
virtualenv -p /usr/local/bin/python3 [虚拟环境名称]
</code></pre>
<p>默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package，那么可以加上参数 --no-site-packages 建立虚拟环境</p>
<pre><code class="language-python"># 创建的虚拟环境不包含系统环境中的site packages
virtualenv --no-site-packages [虚拟环境名称]
</code></pre>
<p><strong>启动虚拟环境</strong></p>
<pre><code class="language-python">cd  [虚拟环境名称]
source ./bin/activate
</code></pre>
<p><strong>退出虚拟环境</strong></p>
<pre><code class="language-python">deactivate
</code></pre>
<p><strong>在虚拟环境安装 Python packages</strong><br>
Virtualenv 附带有 pip 安装工具，因此需要安装的 packages 可以直接运行：</p>
<pre><code class="language-python">pip install [套件名称]
</code></pre>
<h2 id="13-virtualenvwrapper">1.3 Virtualenvwrapper</h2>
<p>Virtualenvwrapper 是一个虚拟环境管理工具，它能够管理创建的虚拟环境的位置，并能够方便地查看虚拟环境的名称以及切换到指定的虚拟环境。</p>
<p><strong>安装（确保virtualenv已经安装）</strong><br>
安装需要在非虚拟环境下进行</p>
<pre><code class="language-python">sudo pip install virtualenvwrapper
# 或者使用豆瓣源
sudo pip install -i https://pypi.douban.com/simple virtualenvwrapper
</code></pre>
<p><strong>查找virtualenvwrapper.sh</strong></p>
<pre><code class="language-python">which virtualenvwrapper.sh
</code></pre>
<blockquote>
<p>我的机器上的位置是：/Library/Frameworks/Python.framework/Versions/3.4/bin/virtualenvwrapper.sh</p>
</blockquote>
<p><strong>修改.bash_profile</strong><br>
打开/Users/用户名/.bash_profile ，在最后加入：</p>
<pre><code class="language-bash">export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_SCRIPT=/Library/Frameworks/Python.framework/Versions/3.4/bin/virtualenvwrapper.sh
export VIRTUALENVWRAPPER_PYTHON=/Library/Frameworks/Python.framework/Versions/3.4/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/Library/Frameworks/Python.framework/Versions/3.4/bin/virtualenv
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
source /Library/Frameworks/Python.framework/Versions/3.4/bin/virtualenvwrapper.sh
</code></pre>
<h2 id="14-virtualenvwrapper的使用">1.4 Virtualenvwrapper的使用</h2>
<p><strong>创建虚拟机</strong></p>
<pre><code class="language-python">mkvirtualenv [虚拟环境名称]
# 当然也可以指定虚拟机的 python 版本
mkvirtualenv [虚拟环境名称] -p /usr/local/bin/python3 
</code></pre>
<p><strong>列出虚拟环境列表</strong></p>
<pre><code class="language-bash">workon 或者 lsvirtualenv
</code></pre>
<p><strong>启动/切换虚拟环境</strong></p>
<pre><code class="language-bash">workon [虚拟环境名称]
</code></pre>
<p><strong>删除虚拟环境</strong></p>
<pre><code class="language-bash">rmvirtualenv [虚拟环境名称]
</code></pre>
<p><strong>离开虚拟环境，和 virutalenv 一样的命令</strong></p>
<pre><code class="language-bash">deactivate
</code></pre>
<h1 id="2机器学习基础阶段的环境搭建">2.机器学习基础阶段的环境搭建</h1>
<p>整个机器学习基础阶段会用到Matplotlib、Numpy、Pandas等库，为了统一版本号在环境中使用，将所有的库及其版本放到了文件requirements.txt当中，然后统一安装</p>
<p><strong>新建一个用于人工智能环境的虚拟环境</strong></p>
<pre><code class="language-bash">mkvirtualenv ai_base
</code></pre>
<p>requirements.txt 的内容</p>
<pre><code class="language-bash">matplotlib==2.2.2
numpy==1.16.5
pandas==1.2.1
tables==3.6.1
jupyter==1.0.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[02.matplotlib的使用]]></title>
        <id>https://heshiying.github.io/post/02jupyter-notebook-de-shi-yong/</id>
        <link href="https://heshiying.github.io/post/02jupyter-notebook-de-shi-yong/">
        </link>
        <updated>2020-12-10T14:23:22.000Z</updated>
        <summary type="html"><![CDATA[<p>matplotlib.pyplot是使matplotlib像MATLAB一样工作的函数的集合。每个pyplot功能都会对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰绘图等。</p>
<p>在matplotlib.pyplot各种状态下，函数调用之间会保留在一起，以便跟踪当前图形和绘图区域之类的内容，并且绘图功能指向当前轴（请注意，此处和文档中大多数地方的“轴”是指到轴 的图形的部分 和不超过一个轴线的严格的数学术语）。</p>
]]></summary>
        <content type="html"><![CDATA[<p>matplotlib.pyplot是使matplotlib像MATLAB一样工作的函数的集合。每个pyplot功能都会对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰绘图等。</p>
<p>在matplotlib.pyplot各种状态下，函数调用之间会保留在一起，以便跟踪当前图形和绘图区域之类的内容，并且绘图功能指向当前轴（请注意，此处和文档中大多数地方的“轴”是指到轴 的图形的部分 和不超过一个轴线的严格的数学术语）。</p>
<!-- more -->
<h1 id="1中文显示问题解决">1.中文显示问题解决</h1>
<p>在Python脚本中动态设置matplotlibrc,这样也可以避免由于更改配置文件而造成的麻烦，具体代码如下：</p>
<pre><code class="language-python">from pylab import mpl
# 设置显示中文字体
mpl.rcParams[&quot;font.sans-serif&quot;] = [&quot;SimHei&quot;]
</code></pre>
<p>有时候，字体更改后，会导致坐标轴中的部分字符无法正常显示，此时需要更改axes.unicode_minus参数：</p>
<pre><code class="language-python"># 设置正常显示符号
mpl.rcParams[&quot;axes.unicode_minus&quot;] = False
</code></pre>
<h1 id="2折线图">2.折线图</h1>
<pre><code class="language-python">import matplotlib.pyplot as plt
from pylab import mpl
# 设置显示中文字体
mpl.rcParams[&quot;font.sans-serif&quot;] = [&quot;SimHei&quot;]
plt.plot([1, 2, 3, 4])
plt.ylabel('y轴名字')
plt.show()
</code></pre>
<p><img src="https://heshiying.github.io/post-images/1612511389835.png" alt="" loading="lazy"><br>
为什么x轴的范围是0-3，而y轴的范围是1-4。如果您向提供单个列表或数组 plot，则matplotlib假定它是y值的序列，并自动为您生成x值。由于python范围以0开头，因此默认的x向量的长度与y相同，但以0开头。因此x数据为 。[0, 1, 2, 3]</p>
<p>plot是一种多功能函数，它将接受任意数量的参数。例如，要绘制x与y的关系图，可以编写：</p>
<pre><code class="language-python">plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://heshiying.github.io/post-images/1612525683210.png" alt="" loading="lazy"></figure>
<h2 id="21-格式化绘图样式">2.1 格式化绘图样式</h2>
<p>对于每对x，y参数，都有一个可选的第三个参数，它是表示图的颜色和线条类型的格式字符串。格式字符串的字母和符号来自MATLAB，您将颜色字符串与线型字符串连接在一起。默认格式字符串是“ b-”，这是一条蓝色实线。例如，要用红色圆圈绘制以上内容</p>
<pre><code class="language-python">import matplotlib.pyplot as plt
from pylab import mpl
# 设置显示中文字体
mpl.rcParams[&quot;font.sans-serif&quot;] = [&quot;SimHei&quot;]
plt.plot([1, 2, 3, 4], [1, 4, 9, 16],'ro')
plt.ylabel('y轴名字')
plt.axis([0, 6, 0, 20])
plt.show()
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://heshiying.github.io/post-images/1612526412605.png" alt="" loading="lazy"></figure>
<h2 id="22-添加自定义xy的刻度">2.2 添加自定义x,y的刻度</h2>
<ul>
<li>plt.xticks(x, **kwargs)<br>
x:要显示的刻度值</li>
<li>plt.yticks(y, **kwargs)<br>
y:要显示的刻度值</li>
</ul>
<pre><code class="language-python">import matplotlib.pyplot as plt
import random
from pylab import mpl

# 设置显示中文字体
mpl.rcParams[&quot;font.sans-serif&quot;] = [&quot;SimHei&quot;]

x = range(60)
y_shanghai = [random.uniform(10,27) for i in x]
plt.figure(figsize=(20,7),dpi=80)
plt.plot(x,y_shanghai)

# 构造x轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
# 构造y轴刻度
y_ticks = range(40)

# 修改x,y轴坐标的刻度显示
plt.xticks(x[::5], x_ticks_label[::5])
plt.yticks(y_ticks[::5])

plt.show()
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://heshiying.github.io/post-images/1612526926570.png" alt="" loading="lazy"></figure>
<h2 id="23-添加网格显示">2.3 添加网格显示</h2>
<p>为了更加清楚地观察图形对应的值</p>
<pre><code class="language-python">plt.grid(True, linestyle='--', alpha=0.5)
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://heshiying.github.io/post-images/1612529668398.png" alt="" loading="lazy"></figure>
<h2 id="24-添加描述信息">2.4 添加描述信息</h2>
<p>添加x轴、y轴描述信息及标题</p>
<blockquote>
<p>通过fontsize参数可以修改图像中字体的大小</p>
</blockquote>
<pre><code class="language-python">plt.xlabel(&quot;时间&quot;)
plt.ylabel(&quot;温度&quot;)
plt.title(&quot;中午11点0分到12点之间的温度变化图示&quot;, fontsize=20)
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://heshiying.github.io/post-images/1612529749219.png" alt="" loading="lazy"></figure>
<h2 id="25-图像保存">2.5 图像保存</h2>
<pre><code class="language-python"># 保存图片到指定路径
plt.savefig(&quot;test.png&quot;)
</code></pre>
<p>注意：plt.show()会释放figure资源，如果在显示图像之后保存图片将只能保存空图片。</p>
<p><strong>完整代码</strong></p>
<pre><code class="language-python">import matplotlib.pyplot as plt
import random
from pylab import mpl

# 设置显示中文字体
mpl.rcParams[&quot;font.sans-serif&quot;] = [&quot;SimHei&quot;]

x = range(60)
y_shanghai = [random.uniform(10,27) for i in x]
plt.figure(figsize=(20,7),dpi=80)
plt.plot(x,y_shanghai)

# 构造x轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
# 构造y轴刻度
y_ticks = range(40)

# 修改x,y轴坐标的刻度显示
plt.xticks(x[::5], x_ticks_label[::5])
plt.yticks(y_ticks[::5])
plt.grid(True, linestyle='--', alpha=0.5)
plt.xlabel(&quot;时间&quot;)
plt.ylabel(&quot;温度&quot;)
plt.title(&quot;中午11点0分到12点之间的温度变化图示&quot;, fontsize=20)
plt.show()
</code></pre>
<h1 id="3-在一个坐标系中绘制多个图像">3 在一个坐标系中绘制多个图像</h1>
<h2 id="31-多次plot">3.1 多次plot</h2>
<p>需求：再添加一个城市的温度变化</p>
<p>收集到北京当天温度变化情况，温度在1度到3度。怎么去添加另一个在同一坐标系当中的不同图形，其实很简单只需要再次plot即可，但是需要区分线条，如下显示<br>
<img src="https://heshiying.github.io/post-images/1612530001960.png" alt="" loading="lazy"></p>
<pre><code class="language-python"># 增加北京的温度数据
y_beijing = [random.uniform(1, 3) for i in x]

# 绘制折线图
plt.plot(x, y_shanghai)
# 使用多次plot可以画多个折线
plt.plot(x, y_beijing, color='r', linestyle='--')
</code></pre>
<p>我们仔细观察，用到了两个新的地方，一个是对于不同的折线展示效果，一个是添加图例。</p>
<h2 id="32-设置图形风格">3.2 设置图形风格</h2>
<table>
<thead>
<tr>
<th>颜色字符</th>
<th>风格字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>r 红色</td>
<td>- 实线</td>
</tr>
<tr>
<td>g 绿色</td>
<td>-- 虚线</td>
</tr>
<tr>
<td>b 蓝色</td>
<td>-. 点划线</td>
</tr>
<tr>
<td>w 白色</td>
<td>: 点虚线</td>
</tr>
<tr>
<td>c 青色</td>
<td>'' 留空、空格</td>
</tr>
<tr>
<td>m 洋红</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="33-显示图例">3.3 显示图例</h2>
<p>注意：如果只在plt.plot()中设置label还不能最终显示出图例，还需要通过plt.legend()将图例显示出来。</p>
<pre><code class="language-python"># 绘制折线图
plt.plot(x, y_shanghai, label=&quot;上海&quot;)
# 使用多次plot可以画多个折线
plt.plot(x, y_beijing, color='r', linestyle='--', label=&quot;北京&quot;)

# 显示图例
plt.legend(loc=&quot;best&quot;)
</code></pre>
<table>
<thead>
<tr>
<th>Location String</th>
<th>Location Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>'best'</td>
<td>0</td>
</tr>
<tr>
<td>'upper right'</td>
<td>1</td>
</tr>
<tr>
<td>'upper left'</td>
<td>2</td>
</tr>
<tr>
<td>'lower left'</td>
<td>3</td>
</tr>
<tr>
<td>'lower right'</td>
<td>4</td>
</tr>
<tr>
<td>'right'</td>
<td>5</td>
</tr>
<tr>
<td>'center left'</td>
<td>6</td>
</tr>
<tr>
<td>'center right'</td>
<td>7</td>
</tr>
<tr>
<td>'lower center'</td>
<td>8</td>
</tr>
<tr>
<td>'upper center'</td>
<td>9</td>
</tr>
<tr>
<td>'center'</td>
<td>10</td>
</tr>
</tbody>
</table>
<p><strong>完整代码</strong></p>
<pre><code class="language-python"># 0.准备数据
x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]
y_beijing = [random.uniform(1,3) for i in x]

# 1.创建画布
plt.figure(figsize=(20, 8), dpi=100)

# 2.绘制图像
plt.plot(x, y_shanghai, label=&quot;上海&quot;)
plt.plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)

# 2.1 添加x,y轴刻度
# 构造x,y轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
y_ticks = range(40)

# 刻度显示
plt.xticks(x[::5], x_ticks_label[::5])
plt.yticks(y_ticks[::5])

# 2.2 添加网格显示
plt.grid(True, linestyle=&quot;--&quot;, alpha=0.5)

# 2.3 添加描述信息
plt.xlabel(&quot;时间&quot;)
plt.ylabel(&quot;温度&quot;)
plt.title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)

# 2.4 图像保存
plt.savefig(&quot;./test.png&quot;)

# 2.5 添加图例
plt.legend(loc=0)

# 3.图像显示
plt.show()
</code></pre>
<h1 id="4-多个坐标系显示-pltsubplots面向对象的画图方法">4 多个坐标系显示— plt.subplots(面向对象的画图方法)</h1>
<p>如果我们想要将上海和北京的天气图显示在同一个图的不同坐标系当中，效果如下：<br>
<img src="https://heshiying.github.io/post-images/1612530885925.png" alt="" loading="lazy"><br>
可以通过subplots函数实现(旧的版本中有subplot，使用起来不方便)，推荐subplots函数<br>
**matplotlib.pyplot.subplots(nrows=1, ncols=1, <strong>fig_kw) 创建一个带有多个axes(坐标系/绘图区)的图</strong></p>
<pre><code class="language-python">Parameters:    

nrows, ncols : 设置有几行几列坐标系
    int, optional, default: 1, Number of rows/columns of the subplot grid.

Returns:    
fig : 图对象
axes : 返回相应数量的坐标系

设置标题等方法不同：
    set_xticks
    set_yticks
    set_xlabel
    set_ylabel
</code></pre>
<p>关于axes子坐标系的更多方法：参考https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes</p>
<p>注意：plt.函数名()相当于面向过程的画图方法，axes.set_方法名()相当于面向对象的画图方法。</p>
<p><strong>完整代码</strong></p>
<pre><code class="language-python"># 0.准备数据
x = range(60)
y_shanghai = [random.uniform(15, 18) for i in x]
y_beijing = [random.uniform(1, 5) for i in x]

# 1.创建画布
# plt.figure(figsize=(20, 8), dpi=100)
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 8), dpi=100)


# 2.绘制图像
# plt.plot(x, y_shanghai, label=&quot;上海&quot;)
# plt.plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)
axes[0].plot(x, y_shanghai, label=&quot;上海&quot;)
axes[1].plot(x, y_beijing, color=&quot;r&quot;, linestyle=&quot;--&quot;, label=&quot;北京&quot;)

# 2.1 添加x,y轴刻度
# 构造x,y轴刻度标签
x_ticks_label = [&quot;11点{}分&quot;.format(i) for i in x]
y_ticks = range(40)

# 刻度显示
# plt.xticks(x[::5], x_ticks_label[::5])
# plt.yticks(y_ticks[::5])
axes[0].set_xticks(x[::5])
axes[0].set_yticks(y_ticks[::5])
axes[0].set_xticklabels(x_ticks_label[::5])
axes[1].set_xticks(x[::5])
axes[1].set_yticks(y_ticks[::5])
axes[1].set_xticklabels(x_ticks_label[::5])

# 2.2 添加网格显示
# plt.grid(True, linestyle=&quot;--&quot;, alpha=0.5)
axes[0].grid(True, linestyle=&quot;--&quot;, alpha=0.5)
axes[1].grid(True, linestyle=&quot;--&quot;, alpha=0.5)

# 2.3 添加描述信息
# plt.xlabel(&quot;时间&quot;)
# plt.ylabel(&quot;温度&quot;)
# plt.title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)
axes[0].set_xlabel(&quot;时间&quot;)
axes[0].set_ylabel(&quot;温度&quot;)
axes[0].set_title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)
axes[1].set_xlabel(&quot;时间&quot;)
axes[1].set_ylabel(&quot;温度&quot;)
axes[1].set_title(&quot;中午11点--12点某城市温度变化图&quot;, fontsize=20)

# # 2.4 图像保存
plt.savefig(&quot;./test.png&quot;)

# # 2.5 添加图例
# plt.legend(loc=0)
axes[0].legend(loc=0)
axes[1].legend(loc=0)


# 3.图像显示
plt.show()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://heshiying.github.io/post/hello-gridea/</id>
        <link href="https://heshiying.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>